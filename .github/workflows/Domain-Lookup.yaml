name: 提取 IP、解析域名和验证域名可用性

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 0 点运行一次
  workflow_dispatch:  # 手动触发
  repository_dispatch:
    types: [bestdns-update, check-domains-trigger]

permissions:
  contents: write

jobs:
  full-pipeline:
    runs-on: ubuntu-latest

    env:
      URL: "https://www.wetest.vip/page/cloudflare/address_v4.html"
      OUTPUT_FILE: "Fission_ip.txt"
      DOMAIN_FILE: "Fission_domain.txt"
      LAST_DOMAIN_FILE: "Last-domain.txt"

    steps:
      # 检出代码库
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 安装 curl 和 xmllint
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libxml2-utils
          sudo apt-get clean

      # 获取数据并写入文件
      - name: Fetch IP and Update File
        run: |
          echo -n > $OUTPUT_FILE # 清空文件内容

          # 循环提取每一行数据（从 tr[6] 到 tr[8]）
          for i in $(seq 6 8); do
            DATA=$(curl -s "$URL" | xmllint --html --xpath "string(/html/body/div[2]/div[2]/div/div[2]/div[2]/table/tbody/tr[$i]/td[2])" - 2>/dev/null)
            
            # 使用正则表达式来验证是否是有效的 IP 地址
            if echo "$DATA" | grep -Pq '^(\d{1,3}\.){3}\d{1,3}$'; then
              echo "$DATA" >> $OUTPUT_FILE
            fi
          done
      
      - name: Commit IP File
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           script: |
              const fileExists = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '${{ env.OUTPUT_FILE }}',
              }).then(() => true).catch(() => false)

              if (fileExists){
                const hasChanges = await github.rest.repos.compareCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    base: context.sha,
                    head: 'HEAD'
                }).then( res => {
                  return res.data.files.some(file => file.filename == '${{ env.OUTPUT_FILE }}')
                });
                if(hasChanges) {
                  console.log("committing IP file");
                  await github.rest.repos.createOrUpdateFileContents({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: '${{ env.OUTPUT_FILE }}',
                    message: 'Update ${{ env.OUTPUT_FILE }} with latest IPs',
                    content: Buffer.from(require('fs').readFileSync('${{ env.OUTPUT_FILE }}')).toString('base64'),
                    sha: (await github.rest.repos.getContent({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: '${{ env.OUTPUT_FILE }}'
                    }).then(res => res.data.sha).catch(() => undefined)),
                    committer: {
                      name: 'github-actions[bot]',
                      email: 'github-actions[bot]@users.noreply.github.com',
                    }
                  });
                }else{
                 console.log("No changes detected in ${{ env.OUTPUT_FILE }}, skipping commit.");
                }
              }
      
      # 设置 Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify and prepare input files
        run: |
          # 检查 Fission_ip.txt 是否存在
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Error: $OUTPUT_FILE not found. Please include this file in the repository." >&2
            exit 1
          fi

          # 确保 Fission_domain.txt 存在，如果没有则创建
          touch $DOMAIN_FILE

      - name: Run Fission script
        id: run-fission-script
        run: python Fission.py
        continue-on-error: true # 设置错误不终止后续步骤

      - name: Commit Domain File
        uses: actions/github-script@v6
        if: steps.run-fission-script.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           script: |
              const fileExists = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '${{ env.DOMAIN_FILE }}',
              }).then(() => true).catch(() => false)
              if (fileExists){
                   const content = require('fs').readFileSync('${{ env.DOMAIN_FILE }}', 'utf8')
                  if (content.trim() !== ''){ // 检查文件是否为空
                      console.log("committing domain file")
                      await github.rest.repos.createOrUpdateFileContents({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: '${{ env.DOMAIN_FILE }}',
                        message: 'Update output files from Fission.py execution [skip ci]',
                        content: Buffer.from(content).toString('base64'),
                        sha: (await github.rest.repos.getContent({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            path: '${{ env.DOMAIN_FILE }}'
                        }).then(res => res.data.sha).catch(() => undefined)),
                        committer: {
                          name: 'github-actions[bot]',
                          email: 'github-actions[bot]@users.noreply.github.com',
                        }
                      });
                    }else{
                      console.log("Domain file is empty, skipping commit.");
                   }
              }


      # 验证域名可用性
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install httpx
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Check domains
        run: |
          if [ ! -f "$LAST_DOMAIN_FILE" ]; then
            touch "$LAST_DOMAIN_FILE"
          fi
          > "$LAST_DOMAIN_FILE"
          cat $DOMAIN_FILE | httpx -silent -mc 200 -threads 50 -timeout 5 > "$LAST_DOMAIN_FILE"

      - name: Remove protocol prefixes
        run: |
          sed -i 's|^https://||g; s|^http://||g' "$LAST_DOMAIN_FILE"
      
      - name: Commit Last Domain File
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           script: |
              const fileExists = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '${{ env.LAST_DOMAIN_FILE }}',
              }).then(() => true).catch(() => false)
               if (fileExists){
                const hasChanges = await github.rest.repos.compareCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    base: context.sha,
                    head: 'HEAD'
                }).then( res => {
                  return res.data.files.some(file => file.filename == '${{ env.LAST_DOMAIN_FILE }}')
                });
                if(hasChanges) {
                 console.log("committing last domain file");
                  await github.rest.repos.createOrUpdateFileContents({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: '${{ env.LAST_DOMAIN_FILE }}',
                    message: 'Update Last-domain.txt with domains without protocol',
                    content: Buffer.from(require('fs').readFileSync('${{ env.LAST_DOMAIN_FILE }}')).toString('base64'),
                    sha: (await github.rest.repos.getContent({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: '${{ env.LAST_DOMAIN_FILE }}'
                    }).then(res => res.data.sha).catch(() => undefined)),
                   committer: {
                      name: 'github-actions[bot]',
                      email: 'github-actions[bot]@users.noreply.github.com',
                    }
                  });
                }else{
                  console.log("No changes detected in ${{ env.LAST_DOMAIN_FILE }}, skipping commit.");
                }
              }
          

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 2
          keep_minimum_runs: 0
