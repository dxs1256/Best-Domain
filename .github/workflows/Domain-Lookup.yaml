name: 提取 IP、解析域名和验证域名可用性

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 0 点运行一次
  workflow_dispatch:  # 手动触发

permissions:
  contents: write  # 允许读写仓库内容

jobs:
  full-pipeline:
    runs-on: ubuntu-22.04  # 使用稳定的 Ubuntu 22.04

    steps:
      # 检出代码库
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 安装 curl 和 xmllint
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libxml2-utils
          sudo apt-get clean

      # 获取数据并写入文件
      - name: Fetch IP and Update File
        run: |
          URL="https://www.wetest.vip/page/cloudflare/address_v4.html"
          OUTPUT_FILE="Fission_ip.txt"
          echo -n > $OUTPUT_FILE  # 清空文件内容

          # 循环提取每一行数据（从 tr[6] 到 tr[8]）
          for i in $(seq 6 8); do
            DATA=$(curl -s "$URL" | xmllint --html --xpath "string(/html/body/div[2]/div[2]/div/div[2]/div[2]/table/tbody/tr[$i]/td[2])" - 2>/dev/null)
            
            # 使用正则表达式来验证是否是有效的 IP 地址
            if echo "$DATA" | grep -Pq '^(\d{1,3}\.){3}\d{1,3}$'; then
              echo "$DATA" >> $OUTPUT_FILE
            fi
          done

      # 解析域名
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests lxml fake_useragent

      - name: Verify and prepare input files
        run: |
          # 检查 Fission_ip.txt 是否存在
          if [ ! -f "Fission_ip.txt" ]; then
            echo "Error: Fission_ip.txt not found. Please include this file in the repository." >&2
            exit 1
          fi

          # 确保 Fission_domain.txt 存在，如果没有则创建
          touch Fission_domain.txt

      - name: Run Fission script
        id: run-fission-script
        run: python Fission.py

      # 验证域名可用性
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install httpx
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Check domains
        run: |
          if [ ! -f Last-domain.txt ]; then
            touch Last-domain.txt
          fi
          > Last-domain.txt
          cat Fission_domain.txt | httpx -silent -mc 200 > Last-domain.txt

      - name: Remove protocol prefixes
        run: |
          sed -i 's|^https://||g; s|^http://||g' Last-domain.txt

      # 提交所有更改
      - name: Commit and Push All Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 添加所有更改的文件
          git add Fission_ip.txt Fission_domain.txt Last-domain.txt
          
          # 检查是否有更改
          if ! git diff --quiet; then
            git commit -m "Update all files with extracted IPs, domains, and checked domains"
            git push origin HEAD:main
          else
            echo "No changes detected, skipping commit."
          fi

      # 清理旧工作流记录
      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 2
          keep_minimum_runs: 0
