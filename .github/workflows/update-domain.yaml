name: Fission IP, BestDNS & Domain Check

on:
  schedule:
    - cron: '0 0 * * *'  # 每天零点运行
  workflow_dispatch:

jobs:
  full-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. 检出代码仓库
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. 安装 curl 和 xmllint
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libxml2-utils
          sudo apt-get clean

      # 3. 获取 Fission IP 并写入文件
      - name: Fetch IP and Update File
        id: fetch-ip
        run: |
          URL="https://www.wetest.vip/page/cloudflare/address_v4.html"
          OUTPUT_FILE="Fission_ip.txt"
          echo -n > $OUTPUT_FILE # 清空文件内容

          for i in $(seq 6 8); do
            DATA=$(curl -s "$URL" | xmllint --html --xpath "string(/html/body/div[2]/div[2]/div/div[2]/div[2]/table/tbody/tr[$i]/td[2])" - 2>/dev/null)
            if echo "$DATA" | grep -Pq '^(\d{1,3}\.){3}\d{1,3}$'; then
              echo "$DATA" >> $OUTPUT_FILE
            fi
          done
          
          # 检查文件是否有更改，并设置输出变量
          if ! git diff --quiet; then
             echo "::set-output name=ip_changed::true"
          else
            echo "::set-output name=ip_changed::false"
          fi

      # 4. 如果 IP 发生变化，则提交更改
      - name: Commit IP Changes
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Fission_ip.txt
          git commit -m "Update Fission_ip.txt with latest IPs"
          git push origin HEAD:main

      # 5. 等待 5 秒
      - name: Wait 5 seconds
        run: sleep 5

      # 6.  设置 Python 环境 (仅当 IP 发生变化时)
      - name: Set up Python
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 7.  缓存 Python 依赖项 (仅当 IP 发生变化时)
      - name: Cache Python dependencies
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      # 8. 安装 Python 依赖 (仅当 IP 发生变化时)
      - name: Install Python dependencies
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 9. 验证和准备输入文件 (仅当 IP 发生变化时)
      - name: Verify and prepare input files
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
           if [ ! -f "Fission_ip.txt" ]; then
            echo "Error: Fission_ip.txt not found. Please include this file in the repository." >&2
            exit 1
          fi
          touch Fission_domain.txt

      # 10. 执行 BestDNS 逻辑 (仅当 IP 发生变化时)
      - name: Execute BestDNS Logic
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
          echo "BestDNS workflow triggered by ip.yaml"

      # 11. 运行 Fission 脚本 (仅当 IP 发生变化时)
      - name: Run Fission script
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        id: run-fission-script
        run: python Fission.py

      # 12. 提交输出文件 (仅当脚本执行成功且IP发生变化时)
      - name: Commit BestDNS Changes
        if: steps.run-fission-script.outcome == 'success' && steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Fission_domain.txt
          git commit -m "Update output files from Fission.py execution [skip ci]"
          git push

      # 13. 安装 Go
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # 14. 安装 httpx
      - name: Install httpx
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # 15. 检查域名
      - name: Check domains
        run: |
          if [ ! -f Last-domain.txt ]; then
            touch Last-domain.txt
          fi
          > Last-domain.txt
          cat Fission_domain.txt | httpx -silent -mc 200 > Last-domain.txt

      # 16. 移除协议前缀
      - name: Remove protocol prefixes
        run: |
          sed -i 's|^https://||g; s|^http://||g' Last-domain.txt

      # 17. 提交域名检查结果
      - name: Commit Domain Check Result
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Last-domain.txt
          git commit -m "Update Last-domain.txt with domains without protocol"
          git push
      
      # 18. 删除旧的工作流运行记录
      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 2
          keep_minimum_runs: 0
