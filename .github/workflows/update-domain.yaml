name: 更新 Domain 记录

on:
  schedule:
    - cron: '0 0 * * *'  # 每天零点运行
  workflow_dispatch:

jobs:
  full-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. 检出代码仓库
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. 安装 curl 和 xmllint
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libxml2-utils
          sudo apt-get clean

      # 3. 获取 Fission IP 并写入文件
      - name: Fetch IP and Update File
        id: fetch-ip
        run: |
          URL="https://www.wetest.vip/page/cloudflare/address_v4.html"
          OUTPUT_FILE="Fission_ip.txt"
          echo -n > $OUTPUT_FILE # 清空文件内容

          for i in $(seq 6 8); do
            DATA=$(curl -s "$URL" | xmllint --html --xpath "string(/html/body/div[2]/div[2]/div/div[2]/div[2]/table/tbody/tr[$i]/td[2])" - 2>/dev/null)
            if echo "$DATA" | grep -Pq '^(\d{1,3}\.){3}\d{1,3}$'; then
              echo "$DATA" >> $OUTPUT_FILE
            fi
          done
          
          # 检查文件是否有更改，并设置输出变量
          if ! git diff --quiet; then
             echo "ip_changed=false" >> $GITHUB_OUTPUT
          else
             echo "ip_changed=true" >> $GITHUB_OUTPUT
          fi

      # 4.  设置 Python 环境 (仅当 IP 发生变化时)
      - name: Set up Python
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 5.  缓存 Python 依赖项 (仅当 IP 发生变化时)
      - name: Cache Python dependencies
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      # 6. 安装 Python 依赖 (仅当 IP 发生变化时)
      - name: Install Python dependencies
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 7. 验证和准备输入文件 (仅当 IP 发生变化时)
      - name: Verify and prepare input files
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
           if [ ! -f "Fission_ip.txt" ]; then 
             echo "Error: Fission_ip.txt not found. Please include this file in the repository." >&2 ; 
             exit 1 
           fi && touch Fission_domain.txt

      # 8. 执行 BestDNS 逻辑 (仅当 IP 发生变化时)
      - name: Execute BestDNS Logic
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        run: |
          echo "BestDNS workflow triggered by ip.yaml"

      # 9. 运行 Fission 脚本 (仅当 IP 发生变化时)
      - name: Run Fission script
        if: steps.fetch-ip.outputs.ip_changed == 'true'
        id: run-fission-script
        run: python Fission.py
        
      # 10. 安装 Go
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # 11. 安装 httpx
      - name: Install httpx
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          
      # 12. Add Go bin to PATH
      - name: Add Go bin to PATH
        run: echo "$HOME/go/bin" >> $GITHUB_PATH
      
      # 13. 检查域名
      - name: Check domains
        run: |
          if [ ! -f Last-domain.txt ]; then
            touch Last-domain.txt
          fi
          > Last-domain.txt
          cat Fission_domain.txt | httpx -silent -mc 200 > Last-domain.txt

      # 14. 移除协议前缀
      - name: Remove protocol prefixes
        run: |
          sed -i 's|^https://||g; s|^http://||g' Last-domain.txt
          
      # 15. Check for changes
      - name: Check for changes
        id: check_changes
        run: |
          git add Fission_ip.txt Fission_domain.txt Last-domain.txt
          if [[ -z $(git status --porcelain) ]]; then
            echo "No changes detected"
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "commit_message=" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
            COMMIT_MESSAGE="Update $(date +'%Y-%m-%d %H:%M:%S')"
            echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          fi

      # 16. 提交更改
      - name: Commit and Push Changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "${{ steps.check_changes.outputs.commit_message }}"
          git push origin HEAD:main
      
      # 17. 删除旧的工作流运行记录
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 2
          keep_minimum_runs: 0
        permissions:
          actions: write
