name: 更新 Cloudflare DNS 记录

on:
  schedule:
    - cron: '0 1 * * *'  # 每天零点运行
  workflow_dispatch:

jobs:
  update-cloudflare-record:
    runs-on: ubuntu-latest  # 使用 Ubuntu 最新版 runner

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装 Python 和依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests jq

      - name: 获取 Cloudflare IPv4 地址
        id: get_cloudflare_ips
        run: |
          # 使用 curl 获取网页内容
          WEBPAGE_CONTENT=$(curl -s https://www.wetest.vip/page/cloudflare/address_v4.html)

          # 使用 grep 和 sed 提取 IP 地址并用逗号分隔
          IP_ADDRESSES=$(echo "$WEBPAGE_CONTENT" | grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' | tr '\n' ',' | sed 's/,$//')

          # 输出提取到的 IP 地址
          echo "IP 地址：$IP_ADDRESSES"

          # 设置环境变量
          echo "IP_ADDRESSES=$IP_ADDRESSES" >> $GITHUB_ENV

      - name: 获取 Cloudflare DNS 记录并清理
        run: |
          # 从 Secrets 中获取 Cloudflare 配置信息
          CF_API_KEY="${{ secrets.CF_API_KEY }}"
          CF_ZONE_ID="${{ secrets.CF_ZONE_ID }}"
          CF_DOMAIN_NAME="${{ secrets.CF_DOMAIN_NAME }}"
          
          # 设置 API 请求头
          headers="Authorization: Bearer $CF_API_KEY"
          
          # 获取现有 DNS 记录
          dns_records_url="https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records"
          response=$(curl -s -X GET "$dns_records_url" -H "$headers")
          
          # 获取要删除的记录，保留 IP 地址 74.48.144.51
          record_ids=$(echo "$response" | jq -r '.result[] | select(.name == "'"$CF_DOMAIN_NAME"'") | select(.content != "74.48.144.51") | .id')
          
          # 删除旧的 DNS 记录
          if [[ -n "$record_ids" ]]; then
            for record_id in $record_ids; do
              curl -s -X DELETE "$dns_records_url/$record_id" -H "$headers"
              echo "Deleted DNS record: $record_id"
            done
          else
            echo "No DNS records to delete (except for the specified IP)."
          fi


      - name: 更新 Cloudflare DNS 记录
        run: |
          # 从 Secrets 中获取 Cloudflare 配置信息
          CF_API_KEY="${{ secrets.CF_API_KEY }}"
          CF_ZONE_ID="${{ secrets.CF_ZONE_ID }}"
          CF_DOMAIN_NAME="${{ secrets.CF_DOMAIN_NAME }}"
          dns_records_url="https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records"

          # 获取从文件读取的 IP 地址
          IP_ADDRESSES="${{ env.IP_ADDRESSES }}"
        
          # 检查 IP_ADDRESSES 是否为空
          if [[ -z "$IP_ADDRESSES" ]]; then
             echo "No IP addresses to add from https://www.wetest.vip/page/cloudflare/address_v4.html. Exiting."
             exit 0
          fi
        
          # 遍历每个 IP 地址并更新 DNS 记录
          for IP in $(echo $IP_ADDRESSES | tr ',' '\n'); do
            # 确保 IP 格式正确，使用正则表达式检查
            if [[ ! $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              echo "Invalid IP address format: $IP. Skipping."
              continue
            fi

            # 使用多行字符串创建新的 DNS 记录
            data="{\"type\": \"A\", \"name\": \"$CF_DOMAIN_NAME\", \"content\": \"$IP\", \"ttl\": 60, \"proxied\": false}"

            response=$(curl -s -X POST "$dns_records_url" -H "Authorization: Bearer $CF_API_KEY" -H "Content-Type: application/json" --data "$data")

            # 检查是否成功
            if [[ $(echo "$response" | jq -r '.success') == "true" ]]; then
              echo "Successfully updated DNS record for $CF_DOMAIN_NAME to $IP"
            else
              echo "Failed to update DNS record for $CF_DOMAIN_NAME to $IP. Response: $response"
            fi
          done
